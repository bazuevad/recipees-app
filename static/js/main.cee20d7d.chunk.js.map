{"version":3,"sources":["Recipees.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","time","image","className","src","alt","App","useState","recipees","setRecipees","useEffect","getRecipes","a","fetch","response","json","data","results","console","log","type","map","recipe","readyInMinutes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAeeA,G,MAXA,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACzB,OACI,yBAAKC,UAAY,UACb,4BAAKH,GACL,2BAAIC,GACJ,yBAAKG,IAAKF,EAAOG,IAAM,QCkCpBC,EAvCH,WACV,IADgB,EAKgBC,mBAAS,IALzB,mBAKTC,EALS,KAKCC,EALD,KAMhBC,qBAAU,WACRC,MACA,IAEF,IAAMA,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MARV,6GAOI,cACXC,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAIjBP,EAAYO,EAAKC,SACjBC,QAAQC,IAAIH,EAAKC,SALA,2CAAH,qDAQhB,OACE,6BACE,0BAAMd,UAAY,eAChB,2BAAOA,UAAY,eAAeiB,KAAK,SACvC,4BAAQjB,UAAY,gBAAgBiB,KAAO,UAA3C,WAEF,yBAAKjB,UAAU,UACdK,EAASa,KAAI,SAAAC,GAAM,OAClBA,EAAOpB,MACP,kBAAC,EAAD,CACAF,MAASsB,EAAOtB,MAChBC,KAAQqB,EAAOC,eACfrB,MAASoB,EAAOpB,QAEhB,WCxBYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.cee20d7d.chunk.js","sourcesContent":["import React from 'react';\nimport Image from'react';\n\n\nconst Recipe = ({title,time, image}) => {\n    return(\n        <div className = \"recipe\">\n            <h1>{title}</h1>\n            <p>{time}</p>\n            <img src={image} alt = \"\"/>\n\n        </div>\n    );\n}\n\nexport default Recipe;\n","import React, {useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipees' ;\n\nconst App = () => {\n  var APP_ID = '650b4ba9';\n  var APP_KEY = 'fe8e990ccf288435f9d7a0f88d403a7836';\n  var base_url = 'https://api.spoonacular.com/recipes/search?query=cheese&number=10&apiKey=a9e7a75fa0dd44368a600a3b7d20888d';\n  \n  const [recipees, setRecipees] = useState([]);\n  useEffect(()=>{\n    getRecipes();\n  },[]);\n\n  const getRecipes = async () => {\n    const response = await fetch(base_url);\n    const data = await response.json();\n    //console.log(data.results);\n    setRecipees(data.results);\n    console.log(data.results);\n\n  }\n  return (\n    <div>\n      <form className = \"search-form\">\n        <input className = \"search-input\" type=\"text\"/>\n        <button className = \"search-button\" type = \"submit\">Search</button>\n      </form>\n      <div className=\"recipe\">\n      {recipees.map(recipe =>(\n        recipe.image?\n        <Recipe \n        title = {recipe.title} \n        time = {recipe.readyInMinutes} \n        image = {recipe.image}\n        />:\n        null\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}