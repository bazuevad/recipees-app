{"version":3,"sources":["recipe.module.css","Recipees.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","image","time","ingredients","url","className","style","recipe","href","img","src","alt","ingr","map","ingredient","text","App","useState","recipees","setRecipees","search","setSearch","query","setQuery","useEffect","getRecipes","second_url","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","totalTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,IAAM,oBAAoB,MAAQ,sBAAsB,KAAO,uB,sNCqBlGC,EAjBA,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAYC,GAA2B,EAAjCC,KAAiC,EAA3BD,OAAME,EAAqB,EAArBA,YAAYC,EAAS,EAATA,IAC3C,OACI,yBAAKC,UAAWC,IAAMC,QAClB,uBAAGC,KAAMJ,EAAKC,UAAaC,IAAMN,OAAjC,IAA0CA,EAA1C,KACA,yBAAKK,UAAaC,IAAMG,IAAKC,IAAKT,EAAOU,IAAM,KAE/C,wBAAIN,UAAaC,IAAMM,MAClBT,EAAYU,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,YCqDrBC,G,MA7DH,WACV,IADgB,EAIgBC,mBAAS,IAJzB,mBAITC,EAJS,KAICC,EAJD,OAKWF,mBAAS,IALpB,mBAKTG,EALS,KAKFC,EALE,OAMSJ,mBAAS,WANlB,mBAMTK,EANS,KAMHC,EANG,KAShBC,qBAAU,WACRC,MACA,CAACH,IACH,IAAII,EAAU,0CAAsCJ,EAAtC,6DAORG,EAAU,uCAAG,8BAAAE,EAAA,sEACMC,MAAMF,GADZ,cACXG,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAYY,EAAKC,MACjBC,QAAQC,IAAIH,EAAKC,MACjBC,QAAQC,IAAI,YALK,2CAAH,qDAchB,OAEE,yBAAK7B,UAAY,OACf,wBAAIA,UAAU,SACb,uBAAGG,KAAM,2DAA2DH,UAAY,QAAhF,QACA,uBAAGG,KAAM,4CAA4CH,UAAY,MAAjE,UACA,uBAAGG,KAAM,8BAA8BH,UAAY,YAAnD,sBAED,0BAAM8B,SAbW,SAAAC,GACnBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAUsBhB,UAAY,eACxC,2BAAOA,UAAY,eAAeiC,KAAK,OAAOC,MAAQnB,EAAQoB,SA5BlD,SAAAJ,GAChBf,EAAUe,EAAEK,OAAOF,OACnBN,QAAQC,IAAId,MA2BR,4BAAQf,UAAY,gBAAgBiC,KAAO,UAA3C,WAEF,yBAAKjC,UAAU,UACda,EAASL,KAAI,SAAAN,GAAM,OAClB,kBAAC,EAAD,CACEmC,IAAOnC,EAAOA,OAAOoC,MACrB3C,MAASO,EAAOA,OAAOoC,MACvBzC,KAAQK,EAAOA,OAAOqC,UACtB3C,MAASM,EAAOA,OAAON,MACvBE,YAAeI,EAAOA,OAAOJ,YAC7BC,IAAOG,EAAOA,OAAOH,aC9CXyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.7ac2bb4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"img\":\"recipe_img__36hzO\",\"title\":\"recipe_title__1jR5P\",\"ingr\":\"recipe_ingr__TCqIE\"};","import React from 'react';\nimport Image from'react';\nimport style from './recipe.module.css';\n\n\nconst Recipe = ({title,time, image,ingredients,url}) => {\n    return(\n        <div className={style.recipe}>\n            <a href={url} className = {style.title}> {title} </a>\n            <img className = {style.img} src={image} alt = \"\"/>\n            \n            <o1 className = {style.ingr}>\n                {ingredients.map(ingredient => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </o1>\n            \n            \n        </div>\n    );\n}\n\nexport default Recipe;\n","import React, {useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipees' ;\nimport $ from \"jquery\";\n\nconst App = () => {\n  const DARIA = '650b4ba9';\n  var APP_KEY = 'fe8e990ccf288435f9d7a0f88d403a7836';\n  \n  const [recipees, setRecipees] = useState([]);\n  const [search,setSearch] = useState(\"\");\n  const [query,setQuery] = useState(\"chicken\");\n\n\n  useEffect(()=>{\n    getRecipes();\n  },[query]);\n  var second_url = `https://api.edamam.com/search?q=${query}&app_id=650b4ba9&app_key=fe8e990ccf288435f9d7a0f88d403a78`;\n\n  const getSearch = e =>{\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const getRecipes = async () => {\n    const response = await fetch(second_url);\n    const data = await response.json();\n    setRecipees(data.hits);\n    console.log(data.hits);\n    console.log('${DARIA}');\n    \n  };\n\n  const updateSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n  return (\n   \n    <div className = \"app\">\n      <h4 className=\"about\">\n       <a href =\"https://github.com/bazuevad/recipees-app/tree/master/src\" className = \"code\">Code</a>\n       <a href =\"https://www.linkedin.com/in/dariabazueva/\" className = \"me\">Author</a>\n       <a href =\"https://github.com/bazuevad\" className = \"projects\">My Other Projects</a>\n      </h4>\n      <form onSubmit={updateSearch} className = \"search-form\">\n        <input className = \"search-input\" type=\"text\" value ={search} onChange={getSearch}/>\n        <button className = \"search-button\" type = \"submit\">Search</button>\n      </form>\n      <div className=\"recipe\">\n      {recipees.map(recipe =>(\n        <Recipe \n          key = {recipe.recipe.label}\n          title = {recipe.recipe.label} \n          time = {recipe.recipe.totalTime} \n          image = {recipe.recipe.image}\n          ingredients = {recipe.recipe.ingredients}\n          url = {recipe.recipe.url}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}